name: Go Release Binaries

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16

      # Check out the code
      - name: Check out code
        uses: actions/checkout@v2

      # Build the binaries
      - name: Build binaries
        run: |
          GOOS=linux GOARCH=amd64 go build -o myapp-linux-amd64 main.go
          GOOS=darwin GOARCH=amd64 go build -o myapp-darwin-amd64 main.go
          GOOS=windows GOARCH=amd64 go build -o myapp-windows-amd64.exe main.go

      # Get the latest tag
      - name: Get latest tag
        id: get_latest_tag
        run: echo ::set-output name=tag::$(git describe --abbrev=0 --tags)

      # Calculate next tag
      - name: Calculate next tag
        id: calculate_next_tag
        run: |
          IFS='.' read -r major minor patch <<< "${{ steps.get_latest_tag.outputs.tag }}"
          next_patch=$((patch+1))
          echo ::set-output name=next_tag::"$major.$minor.$next_patch"

      # Create a tag for the release
      - name: Create tag
        id: create_tag
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.calculate_next_tag.outputs.next_tag }}
          release_name: Release ${{ steps.calculate_next_tag.outputs.next_tag }}
          body: This is an automated release for the latest changes.

      # Upload the binaries as release assets
      - name: Upload release assets
        id: upload-release-assets-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_tag.outputs.upload_url }}
          asset_path: ./myapp-linux-amd64
          asset_name: myapp-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload release assets
        id: upload-release-assets-darwin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_tag.outputs.upload_url }}
          asset_path: ./myapp-darwin-amd64
          asset_name: myapp-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload release assets
        id: upload-release-assets-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_tag.outputs.upload_url }}
          asset_path: ./myapp-windows-amd64.exe
          asset_name: myapp-windows-amd64.exe
          asset_content_type: application/octet-stream
